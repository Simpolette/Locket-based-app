Prompt for giving ideas on use cases specification:

Generate use case specification using the following form:
Use-Case Name 
Brief Description
[The description briefly conveys the role and purpose of the use case. A single paragraph will suffice for this description.]
Flow of Events
Basic Flow 
[This use case starts when the actor does something. An actor always initiates use cases. The use case describes what the actor does and what the system does in response. It is phrased in the form of a dialog between the actor and the system.
The use case describes what happens inside the system, but not how or why. If information is exchanged, be specific about what is passed back and forth. For example, it is not very illuminating to say that the actor enters customer information. It is better to say the actor enters the customer’s name and address. A Glossary of Terms is often useful to keep the complexity of the use case manageable⎯you may want to define things like customer information there to keep the use case from drowning in details. 
Simple alternatives may be presented within the text of the use case. If it only takes a few sentences to describe what happens when there is an alternative, do it directly within the Flow of Events section. If the alternative flow is more complex, use a separate section to describe it. For example, an Alternative Flow subsection explains how to describe more complex alternatives. 
A picture is sometimes worth a thousand words, though there is no substitute for clean, clear prose. If it improves clarity, feel free to paste graphical depictions of user interfaces, process flows or other figures into the use case. If a flow chart is useful to present a complex decision process, by all means use it!  Similarly for state-dependent behavior, a state-transition diagram often clarifies the behavior of a system better than pages upon pages of text. Use the right presentation medium for your problem, but be wary of using terminology, notations or figures that your audience may not understand. Remember that your purpose is to clarify, not obscure.]
Alternative Flows
< First Alternative Flow >
[More complex alternatives are described in a separate section, referred to in the Basic Flow subsection of Flow of Events section. Think of the Alternative Flow subsections like alternative behavior⎯ each alternative flow represents alternative behavior usually due to exceptions that occur in the main flow. They may be as long as necessary to describe the events associated with the alternative behavior. When an alternative flow ends, the events of the main flow of events are resumed unless otherwise stated.]
< An Alternative Subflow >
[Alternative flows may, in turn, be divided into subsections if it improves clarity.]
< Second Alternative Flow >
[There may be, and most likely will be, a number of alternative flows in a use case. Keep each alternative flow separate to improve clarity. Using alternative flows improves the readability of the use case, as well as preventing use cases from being decomposed into hierarchies of use cases. Keep in mind that use cases are just textual descriptions, and their main purpose is to document the behavior of a system in a clear, concise, and understandable way.]
Special Requirements
[A special requirement is typically a nonfunctional requirement that is specific to a use case, but is not easily or naturally specified in the text of the use case’s event flow. Examples of special requirements include legal and regulatory requirements, application standards, and quality attributes of the system to be built including usability, reliability, performance or supportability requirements. Additionally, other requirements⎯such as operating systems and environments, compatibility requirements, and design constraints⎯should be captured in this section.]
< First Special Requirement >

Preconditions
[A precondition of a use case is the state of the system that must be present prior to a use case being performed.]
< Precondition One >
Postconditions
[A postcondition of a use case is a list of possible states the system can be in immediately after a use case has finished.]
< Postcondition One >
Extension Points
[Extension points of the use case.]
<Name of Extension Point>
[Definition of the location of the extension point in the flow of events.]

---------------------------------------------------------------------------------------------

Prompt for generating prototype:
All of the use cases prototype are generated using the following formula:
Generate the prototype for a mobile application using the following use case specification:
<Use case Specification from Introduction to the end of alternative flow>

For example:
Generate the prototype for a mobile application using the following use case specification:
Introduction Brief DescriptionThis use case allows a user to configure their notification preferences within the app. Users can enable or disable different types of notifications, such as new photo alerts, friend requests, or activity updates. The goal is to provide control over when and how users receive updates from the system.Primary ActorThe UserFlow of EventsBasic Flow The user navigates to the Settings screen from the main screen.The user selects the “Notifications” option.The system displays the current notification preferences.User adjusts the settings, such as:Turning notifications on/off globally.Enabling/disabling specific types (e.g., "New Post", "Friend request", “New Message”).User taps “Save”The system validates and updates the stored preferences.A confirmation is shown to the user (e.g., "Your changes have been saved").Alternative FlowsFailure to Retrieve Preferences (Step 3)The system fails to fetch current settings due to a server timeout or offline status.The system displays an error: “Cannot load settings. Try again later.”=> The user may retry or exit. If retry succeeds, return to Step 3.Save Operation Fails (Step 5)The system encounters a backend error during the save operation.The user sees: “Changes could not be saved. Retry?” => The user may retry Step 5, or exit and retry later.User Cancels Without Saving (Step 5)The user makes changes but leaves the screen without savingThe system shows a prompt: “Discard unsaved changes? => The user confirms or returns to editing.User Close Application (Step 5.1)The user close the application without savingThe system discard all changes




